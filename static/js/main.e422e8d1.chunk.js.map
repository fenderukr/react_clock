{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","today","Date","timerId","this","window","setInterval","setState","console","info","toUTCString","slice","prevProps","clockName","props","debug","clearInterval","className","Component","App","hasClock","getRandomName","document","addEventListener","event","preventDefault","value","now","toString","ReactDOM","render","getElementById"],"mappings":"6MAEaA,EAAb,4MACEC,MAAyB,CACvBC,MAAO,IAAIC,MAFf,EAKEC,QAAU,EALZ,uDAOE,WAA2B,IAAD,OACxBC,KAAKD,QAAUE,OAAOC,aAAY,WAChC,EAAKC,SAAS,CACZN,MAAO,IAAIC,OAIbM,QAAQC,KAAK,EAAKT,MAAMC,MAAMS,cAAcC,OAAO,IAAK,MACvD,OAfP,gCAkBE,SAAmBC,GACbA,EAAUC,YAAcT,KAAKU,MAAMD,WAErCL,QAAQO,MAAR,uBACkBH,EAAUC,UAD5B,eAC4CT,KAAKU,MAAMD,cAtB7D,kCA2BE,WACER,OAAOW,cAAcZ,KAAKD,WA5B9B,oBA+BE,WACE,IAAQU,EAAcT,KAAKU,MAAnBD,UAER,OACE,sBAAKI,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SAAiCJ,IAEhC,YAED,sBAAMI,UAAU,cAAhB,SACGb,KAAKJ,MAAMC,MAAMS,cAAcC,OAAO,IAAK,YAzCtD,GAA2BO,aCOdC,EAAb,4MACEnB,MAAkB,CAChBoB,UAAU,EACVP,UAAW,WAHf,uDAME,WAA2B,IAAD,OACxBR,OAAOC,aAAY,WACjB,EAAKC,SAAS,CACZM,UAAW,EAAKQ,oBAEjB,MAEHC,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBAEN,EAAKlB,SAAS,CACZa,UAAU,OAIdE,SAASC,iBAAiB,SAAS,SAACC,GAClCA,EAAMC,iBAEN,EAAKlB,SAAS,CACZa,UAAU,SAzBlB,2BA+BE,WACE,IAAMM,EAAQxB,KAAKyB,MAAMC,WAAWjB,OAAO,GAE3C,MAAM,SAAN,OAAgBe,KAlCpB,oBAqCE,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,6CACCb,KAAKJ,MAAMoB,UAAY,cAAC,EAAD,CAAOP,UAAWT,KAAKJ,MAAMa,mBAzC7D,GAAyBK,aCNzBW,IAASC,OACP,cAAC,EAAD,IACAR,SAASS,eAAe,W","file":"static/js/main.e422e8d1.chunk.js","sourcesContent":["import { Component } from 'react';\n\nexport class Clock extends Component<{ clockName: string }> {\n  state: { today: Date } = {\n    today: new Date(),\n  };\n\n  timerId = 0;\n\n  componentDidMount(): void {\n    this.timerId = window.setInterval(() => {\n      this.setState({\n        today: new Date(),\n      });\n\n      // eslint-disable-next-line no-console\n      console.info(this.state.today.toUTCString().slice(-12, -4));\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: { clockName: string }): void {\n    if (prevProps.clockName !== this.props.clockName) {\n      // eslint-disable-next-line no-console\n      console.debug(\n        `Renamed from ${prevProps.clockName} to ${this.props.clockName}`,\n      );\n    }\n  }\n\n  componentWillUnmount(): void {\n    window.clearInterval(this.timerId);\n  }\n\n  render() {\n    const { clockName } = this.props;\n\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">{clockName}</strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {this.state.today.toUTCString().slice(-12, -4)}\n        </span>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\ninterface AppState {\n  hasClock: boolean;\n  clockName: string;\n}\n\nexport class App extends Component {\n  state: AppState = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  componentDidMount(): void {\n    window.setInterval(() => {\n      this.setState({\n        clockName: this.getRandomName(),\n      });\n    }, 3300);\n\n    document.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n\n      this.setState({\n        hasClock: false,\n      });\n    });\n\n    document.addEventListener('click', (event) => {\n      event.preventDefault();\n\n      this.setState({\n        hasClock: true,\n      });\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getRandomName(): string {\n    const value = Date.now().toString().slice(-4);\n\n    return `Clock-${value}`;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        {this.state.hasClock && <Clock clockName={this.state.clockName} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}